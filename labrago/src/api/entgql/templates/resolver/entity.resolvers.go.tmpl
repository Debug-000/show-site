package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.

import (
	"app/generated"
	"context"
	"sort"

	"github.com/gertd/go-pluralize"
	"github.com/GoLabra/labrago/src/api/cache"
	"github.com/GoLabra/labrago/src/api/entgql/entity"
	"github.com/GoLabra/labrago/src/api/strcase"
)

func (r *edgeResolver) RelatedEntity(ctx context.Context, obj *entity.Edge) (*entity.Entity, error) {
	relatedEntity, ok := cache.Entity.Get(strcase.ToLowerCamel(obj.Type))
	if !ok {
		return nil, nil
	}
	return &relatedEntity, nil
}

func (r *entityResolver) PluralName(ctx context.Context, obj *entity.Entity) (string, error) {
	var pluralizeClient = pluralize.NewClient()
	return pluralizeClient.Plural(obj.Name), nil
}

func (r *entityResolver) DisplayField(ctx context.Context, obj *entity.Entity) (*entity.Field, error) {
	var fields, ok = cache.Field.Get(obj.Name)

	if !ok {
		return &entity.Field{
			Name: obj.DisplayFieldName,
		}, nil
	}

	for _, field := range fields {
		if field.Name == obj.DisplayFieldName {
			return &field, nil
		}
	}

	return &entity.Field{
		Name: obj.DisplayFieldName,
	}, nil
}

func (r *entityResolver) Fields(ctx context.Context, obj *entity.Entity) ([]*entity.Field, error) {
	fields, ok := cache.Field.Get(obj.Name)
	if !ok {
		return nil, nil
	}

	var result = make([]*entity.Field, len(fields))

	for index := range fields {
		result[index] = &fields[index]
	}

	return result, nil
}

func (r *entityResolver) Edges(ctx context.Context, obj *entity.Entity) ([]*entity.Edge, error) {
	edges, ok := cache.Edge.Get(obj.Name)
	if !ok {
		return nil, nil
	}

	var result = make([]*entity.Edge, len(edges))

	for index := range edges {
		result[index] = &edges[index]
	}

	return result, nil
}

func (r *mutationResolver) CreateEntity(ctx context.Context, data entity.CreateEntityInput) (*entity.Entity, error) {
	return r.Service.Entity.CreateEntity(ctx, data)
}

func (r *mutationResolver) UpdateEntity(ctx context.Context, where entity.EntityWhereUniqueInput, data entity.UpdateEntityInput) (*entity.Entity, error) {
	return r.Service.Entity.UpdateEntity(ctx, where, data)
}

func (r *mutationResolver) DeleteEntity(ctx context.Context, where entity.EntityWhereUniqueInput) (*entity.Entity, error) {
	return r.Service.Entity.DeleteEntity(ctx, where)
}

func (r *queryResolver) Entities(ctx context.Context) ([]*entity.Entity, error) {
	entities := cache.Entity.GetAll()

	sort.Slice(entities, func(i, j int) bool {
		return entities[i].Caption < entities[j].Caption
	})

	var result = make([]*entity.Entity, len(entities))

	for index := range entities {
		result[index] = &entities[index]
	}

	return result, nil
}

func (r *queryResolver) Entity(ctx context.Context, where *entity.EntityWhereUniqueInput) (*entity.Entity, error) {
	entity, ok := cache.Entity.Get(*where.Name)
	if !ok {
		return nil, nil
	}
	return &entity, nil
}

func (r *queryResolver) Fields(ctx context.Context) ([]*entity.Field, error) {
	fieldBatches := cache.Field.GetAll()
	fields := []entity.Field{}
	for _, fieldBatch := range fieldBatches {
		fields = append(fields, fieldBatch...)
	}

	var result = make([]*entity.Field, len(fields))

	for index := range fields {
		result[index] = &fields[index]
	}

	return result, nil
}

// Edge returns generated.EdgeResolver implementation.
func (r *Resolver) Edge() generated.EdgeResolver { return &edgeResolver{r} }

// Entity returns generated.EntityResolver implementation.
func (r *Resolver) Entity() generated.EntityResolver { return &entityResolver{r} }

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type edgeResolver struct{ *Resolver }
type entityResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
